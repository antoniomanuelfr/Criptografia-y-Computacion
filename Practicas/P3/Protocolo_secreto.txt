
def evalua(polinomio,punto,p):
    n = len(polinomio)
    e = 0
    aux = 1
    for i in range(n):
        e = (e + polinomio[i]*aux)%p
        aux = (aux * punto)%p
    return(e)


if name == 'main':
    print('1. Introducimos el polinomio con el secreto')
    p = int(input("Introduce el primo módulo el que vamos a trabajar:" ))
    d = int(input("Introduce el número de datos necesarios para recuperar el secreto:" ))
    print('Introduce el coeficiente 0, secreto')
    aux = int(input(""))
    pol = [aux]
    for i in range(1,d):
        print('Introduce el coeficiente',i)
        aux = int(input(""))
        pol.append(aux)
    print('2. Calculamos las porciones del secreto')
    n = int(input("Introduce el número de porciones de secreto:"))
    porciones = []
    for i in range(n):
        print("abscisa para la porcion ",i+1)
        x = int(input(""))
        y = evalua(pol,x,p)
        print([x,y])
        porciones.append([x,y])
    print(porciones)

##########################################################################################

def dif_divididas(l,m,p):
    n = len(l)
    dif = [m]
    for j in range(1,n):
        aux = []
        for i in range(n-j):
            a = ((dif[j-1][i+1]-dif[j-1][i])*inverso(l[i+j]-l[i],p))%p
            aux.append(a)
        dif.append(aux)
    return(dif)
    
    
if name == 'main':
    p = int(input("Introduce el primo módulo el que vamos a trabajar:" ))
    punto = 1
    l = []
    m = []
    while not(punto == '0'):
        punto = input("Introduce un punto 'x,y' por el que pasa el polinomio (0 para terminar):" )
        y = ''
        for i in punto:
            if (i == ','):
                x = int(y)
                y = ''
            else:
                y = y+i
        y = int(y)
        print(x)
        print(y)
        if not(punto == '0'):
            l.append(x%p)
            m.append(y%p)
    newton = dif_divididas(l,m,p)
    print(newton)
    n = len(l)
    secreto = 0
    for j in range(n):
        aux = newton[j][0]
        for i in range(j):
            aux = (aux * l[i]*(p-1))%p
        secreto = (secreto + aux)%p
    print('secreto=',secreto)

    #################################################

    A dice tener la clave privada de un criptosistem de 
    clave publica (p, al, y)

    Diffi-Hellman---------------------------

    p primo
    al es un generador en Zp
    x es un numero entre 2 y p-2
    y es igual a al**x mod p

    ------------------------------------------

    A elige r aleatorio y calcula t = al**r mod p
    lo envia a B

    B elige un Bit c y lo envia a A

    Calcula z = r + c x mod p - 1
    Envia z a B

    B acepta el reto si al**z = t * y ** c mod p

    